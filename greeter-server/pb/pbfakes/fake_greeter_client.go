// Code generated by counterfeiter. DO NOT EDIT.
package pbfakes

import (
	"context"
	"sync"

	greeter "github.com/voprak/grpc-example/greeter-server/pb"
	"google.golang.org/grpc"
)

type FakeGreeterClient struct {
	SayHelloStub        func(context.Context, *greeter.HelloRequest, ...grpc.CallOption) (*greeter.HelloReply, error)
	sayHelloMutex       sync.RWMutex
	sayHelloArgsForCall []struct {
		arg1 context.Context
		arg2 *greeter.HelloRequest
		arg3 []grpc.CallOption
	}
	sayHelloReturns struct {
		result1 *greeter.HelloReply
		result2 error
	}
	sayHelloReturnsOnCall map[int]struct {
		result1 *greeter.HelloReply
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGreeterClient) SayHello(arg1 context.Context, arg2 *greeter.HelloRequest, arg3 ...grpc.CallOption) (*greeter.HelloReply, error) {
	fake.sayHelloMutex.Lock()
	ret, specificReturn := fake.sayHelloReturnsOnCall[len(fake.sayHelloArgsForCall)]
	fake.sayHelloArgsForCall = append(fake.sayHelloArgsForCall, struct {
		arg1 context.Context
		arg2 *greeter.HelloRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.SayHelloStub
	fakeReturns := fake.sayHelloReturns
	fake.recordInvocation("SayHello", []interface{}{arg1, arg2, arg3})
	fake.sayHelloMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGreeterClient) SayHelloCallCount() int {
	fake.sayHelloMutex.RLock()
	defer fake.sayHelloMutex.RUnlock()
	return len(fake.sayHelloArgsForCall)
}

func (fake *FakeGreeterClient) SayHelloCalls(stub func(context.Context, *greeter.HelloRequest, ...grpc.CallOption) (*greeter.HelloReply, error)) {
	fake.sayHelloMutex.Lock()
	defer fake.sayHelloMutex.Unlock()
	fake.SayHelloStub = stub
}

func (fake *FakeGreeterClient) SayHelloArgsForCall(i int) (context.Context, *greeter.HelloRequest, []grpc.CallOption) {
	fake.sayHelloMutex.RLock()
	defer fake.sayHelloMutex.RUnlock()
	argsForCall := fake.sayHelloArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGreeterClient) SayHelloReturns(result1 *greeter.HelloReply, result2 error) {
	fake.sayHelloMutex.Lock()
	defer fake.sayHelloMutex.Unlock()
	fake.SayHelloStub = nil
	fake.sayHelloReturns = struct {
		result1 *greeter.HelloReply
		result2 error
	}{result1, result2}
}

func (fake *FakeGreeterClient) SayHelloReturnsOnCall(i int, result1 *greeter.HelloReply, result2 error) {
	fake.sayHelloMutex.Lock()
	defer fake.sayHelloMutex.Unlock()
	fake.SayHelloStub = nil
	if fake.sayHelloReturnsOnCall == nil {
		fake.sayHelloReturnsOnCall = make(map[int]struct {
			result1 *greeter.HelloReply
			result2 error
		})
	}
	fake.sayHelloReturnsOnCall[i] = struct {
		result1 *greeter.HelloReply
		result2 error
	}{result1, result2}
}

func (fake *FakeGreeterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sayHelloMutex.RLock()
	defer fake.sayHelloMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGreeterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ greeter.GreeterClient = new(FakeGreeterClient)
