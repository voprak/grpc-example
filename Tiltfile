# disable share button.
disable_snapshots()
# disable telemetry
analytics_settings(enable=False)
# print context to
print("context is: {}\n".format(k8s_context()))

# Tilt Extension to sync files without restarting container when required
load('ext://restart_process', 'docker_build_with_restart')

serv="greeter-server"
counterfeiter="go run github.com/maxbrunsfeld/counterfeiter/v6"

# local tilt resource to run protoc code generation command on host machine
# this command generates pb/service.pb.go and pb/service_grpc.pb.go
# tilt will execute this command each time when pb/service.proto file changed
local_resource(
  serv+'-generate',
  'protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative '+serv+'/pb/service.proto',
  deps=[serv+'/pb/service.proto']
)

local_resource(
  serv+'-counterfeiter',
  counterfeiter+' '+serv+'/pb/service_grpc.pb.go GreeterServer \
  && '+counterfeiter+' '+serv+'/pb/service_grpc.pb.go GreeterClient',
  deps=[serv+'/pb/service_grpc.pb.go'] # comment this parameter out to disable autorun
)

# local tilt resource to build go code generated by previous command
# this command run go build and put the result to build folder
local_resource(
  serv+'-compile',
  'CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o '+serv+'/build/service '+serv+'/main.go',
  deps=[serv+'/rpci/server.go', serv+'/pb/service.pb.go', serv+'/pb/service_grpc.pb.go'],
)

# builds docker image and performs smart syncs of go binary from local build folder to docker's app/build folder
# docker_build_with_restart is tilt extension command which syncronizes files from host machine to docker wothout rebuilding the image itself
# tilt watches build folder to sync files as well as docker file
docker_build_with_restart(
  serv+'-image',
  './'+serv,
  entrypoint=['/app/build/service'],
  dockerfile=serv+'/deployments/Dockerfile',
  only=[
    './build'
  ],
  live_update=[
    sync('./'+serv+'/build', '/app/build'),
  ],
)
# watch kubernetes deployment and instructs tilt for further kebernetes resource creation
k8s_yaml(serv+'/deployments/kubernetes.yaml')
# create/configure greeter-server kubernetes deployment resource
k8s_resource(serv, port_forwards=59000, resource_deps=[serv+'-compile'])

local_resource(
    serv+'-tests',
    "ginkgo -r"
)
